import streamlit as st
import json
import requests
import pandas as pd
from streamlit_feedback import streamlit_feedback
from streamlit_option_menu import option_menu
from geoalchemy2 import Geometry
from sqlalchemy import create_engine
from sqlalchemy import URL

import plotly.graph_objects as go

# –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 'http://web:8004/

# –∫–æ–Ω—Ñ–∏–≥ —Å—Ç—Ä–∞–Ω–∏—á–∫–∏
st.set_page_config(
    page_title = "Dashboard",
    layout = 'wide',
    page_icon = "üõ¢Ô∏è", 
    initial_sidebar_state = "auto", 
)

# –¢–∞–π—Ç–ª
# –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ
url_object = URL.create(
    "postgresql+psycopg2",streamlit/old_main.py
    username="postgres",
    password="qq",  # plain (unesascaped) text
    host="192.168.5.219",
    database="amur22_non_iwp",
)

# —Å–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
engine = create_engine(url_object)

# –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–ª—è –Ω—É–∂–Ω–æ–π –Ω–∞–º —Ç–∞–±–ª–∏—Ü–µ, –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ —ç—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ catalog
catalog_table = pd.read_sql('SELECT * FROM data.catalog', engine)
unique_catalog = catalog_table.nunique()
unique_catalog = pd.DataFrame(unique_catalog, columns=[' '])

labels = list(unique_catalog.T)
values = unique_catalog.T.values.tolist()

fig = go.Figure(data=[go.Bar(x = labels, y = values[0])])

# –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Ç–∞–±–ª–∏—Ü–µ site
st.title("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–∞–±–ª–∏—Ü–µ catalog")
st.subheader("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞")
st.plotly_chart(fig, use_container_width=True)

###################################################################################
data_table = pd.read_sql('SELECT * FROM data.data_value LIMIT 9000000', engine)

unique_data = data_table.nunique()
unique_data = pd.DataFrame(unique_data, columns=[' '])

labels_data = list(unique_data.T)
values_data = unique_data.T.values.tolist()

fig = go.Figure(data=[go.Bar(x = labels_data, y = values_data[0])])

# –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Ç–∞–±–ª–∏—Ü–µ data_value
st.title("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–∞–±–ª–∏—Ü–µ data_value")
st.subheader("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞")
st.plotly_chart(fig, use_container_width=True)

###########################################################################
###########################################################################

st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Ç–∞–±–ª–∏—Ü–∞ catalog")
st.dataframe(data = catalog_table.describe(), use_container_width = True)

###################################################################################

st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Ç–∞–±–ª–∏—Ü–∞ data_value")
st.dataframe(data = data_table.describe(), use_container_width = True)